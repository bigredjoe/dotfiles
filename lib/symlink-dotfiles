#!/bin/bash
#
# This script defines the symlink goodies.

source $DOTHOME/lib/common

function link_file () {
    local src=$1 dst=$2

    local overwrite= backup= skip=
    local action=

    # If the destination exists as a file, directory, or link then prompt the user for what to do.
    if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
    then

        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then

            local currentSrc="$(readlink $dst)"

            if [ "$currentSrc" == "$src" ]
            then

                skip=true;
            else

                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
                    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
                read -n 1 action

                case "$action" in
                    o )
                        overwrite=true;;
                    O )
                        overwrite_all=true;;
                    b )
                        backup=true;;
                    B )
                        backup_all=true;;
                    s )
                        skip=true;;
                    S )
                        skip_all=true;;
                    * )
                        ;;
                esac

            fi

        fi

        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "Removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.backup"
            success "Backed up $dst as ${dst}.backup"
        fi

        if [ "$skip" == "true" ]
        then
            success "Skipped $src"
        fi
    fi

    if [ "$skip" != "true" ]  # "false" or empty
    then
        ln -s "$1" "$2"
        success "Linked $1 to $2"
    fi
}

function symlink_dotfiles () {
    user "Symlink the dotfiles? (y/n)"
    read -s -n 1 response
    if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]; then

        local overwrite_all=false backup_all=false skip_all=false

        for src in $(find -H "$DOTHOME" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
        do
            dst="$HOME/$(basename "${src%.*}")"
            #echo "$src -> $dst"
            link_file "$src" "$dst"
        done
    fi
}

