#!/bin/sh

# Configuration Items
###################################################################################################

export HOMEBREW_CASK_OPTS="--appdir=/Applications"

# Functions
###################################################################################################

# Displays the program usage information.
function usage() {
    echo "usage: makemac [[[-e extras] [-n noextras]] | [-h help]]"
}

# A fancier way to echo to the terminal.
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

# Checks to make sure we're running on a Mac.
check_operating_system() {
    case "$OSTYPE" in
        darwin*)
            #echo "Detected OSX!"
            ;;
        linux*)
            echo "Sorry, but this script is intended for Macs running OSX and you're running Linux!"
            exit
            ;;
        bsd*)
            echo "Sorry, but this script is intended for Macs running OSX and you're running BSD!"
            exit
            ;;
        *)
            echo "Sorry, but this script is intended for Macs running OSX!"
            exit
            ;;
    esac
}

# Appends text to a file.
append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME/.zshrc" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME/.zshrc"
    fi
  fi

  if ! grep -Fqs "$text" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

# Sets the OSX preferences I like.
set_osx_preferences() {

    fancy_echo 'Setting OSX preferences...'

    # Set a blazingly fast keyboard repeat rate.
    defaults write NSGlobalDomain KeyRepeat -int 0.02

    # Set a shorter Delay until key repeat.
    defaults write NSGlobalDomain InitialKeyRepeat -int 12

    # Enable Safari debug menu.
    defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    # Show the path bar in Finder.
    defaults write com.apple.finder ShowPathbar -bool true

    # Show Status bar in Finder.
    defaults write com.apple.finder ShowStatusBar -bool true

    # Show indicator lights for open applications in the Dock.
    defaults write com.apple.dock show-process-indicators -bool true

    # Setting the mouse scroll direction.
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    # Show all processes in Activity Monitor by default.
    defaults write com.apple.ActivityMonitor ShowCategory -int 100
}

# Creates the directories I always want.
create_directories() {

    # Make the Bin directory...
    if [ ! -d "$HOME/Bin/" ]; then
        fancy_echo "Creating Bin directory..."
        mkdir "$HOME/Bin"
    fi

    # Make the Code directory...
    if [ ! -d "$HOME/Code/" ]; then
        fancy_echo "Creating Code directory..."
        mkdir "$HOME/Code"
    fi
}

# Install homebrew.
install_homebrew() {
    if ! command -v brew >/dev/null; then
      fancy_echo "Installing homebrew..."
        curl -fsS \
          'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

        # shellcheck disable=SC2016
        #append_to_file "$HOME/.zshrc" 'export PATH="/usr/local/bin:$PATH"'
    else
      fancy_echo "Homebrew already installed. Skipping!"
    fi
}

# Install or upgrade a formula with homebrew.
install_or_upgrade_with_homebrew() {
  if is_installed_by_homebrew "$1"; then
    if is_upgradable_by_homebrew "$1"; then
      fancy_echo "Upgrading %s..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping..." "$1"
    fi
  else
    fancy_echo "Installing %s..." "$1"
    brew install "$@"
  fi
}

# Determine if a formula is installed by homebrew.
is_installed_by_homebrew() {
  brew list -1 | grep -Fqx "$1"
}

# Determine if a formula is upgradable by homebrew.
is_upgradable_by_homebrew() {
  ! brew outdated --quiet "$1" >/dev/null
}

# Determine if something is installed by brew tap.
is_installed_by_brew_tap() {
  brew tap | grep -Fqx "$1"
}

# Install something with brew tap.
add_homebrew_tap() {
  if ! is_installed_by_brew_tap "$1"; then
    fancy_echo "Tapping $1..."
    brew tap "$1" 2> /dev/null
  fi
}

# Installs or updates a gem.
gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

# Expands cask info for helping to see if something is installed by brew cask.
brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

# Determine if something is installed by brew cask.
is_installed_with_brew_cask() {
  local NAME
  NAME=$(brew_cask_expand_alias "$1")
  brew cask list -1 | grep -Fqx "$NAME"
}

# Determine if an app is installed.
app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

# Install something with brew cask.
install_with_brew_cask() {
  if app_is_installed "$1" || is_installed_with_brew_cask "$1"; then
    fancy_echo "$1 is already installed. Skipping..."
  else
    fancy_echo "Installing $1..."
    brew cask install "$@"
  fi
}

# Installs Ruby and RVM.
install_ruby() {
    append_to_file "$HOME/.gemrc" 'gem: --no-document'

    if ! command -v rbenv >/dev/null; then
      if ! command -v rvm >/dev/null; then
        fancy_echo 'Installing RVM and the latest Ruby...'
        curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
        . ~/.rvm/scripts/rvm
      else
        local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
        latest_version="$(curl -s https://raw.githubusercontent.com/wayneeseguin/rvm/stable/VERSION)"
        if [ "$local_version" != "$latest_version" ]; then
          fancy_echo 'Upgrading RVM...'
          rvm get stable --auto-dotfiles --autolibs=enable
        else
          fancy_echo "Already using the latest version of RVM. Skipping..."
        fi
      fi
    fi

    fancy_echo 'Updating Rubygems...'
    gem update --system

    gem_install_or_update 'bundler'

    fancy_echo "Configuring Bundler..."
    number_of_cores=$(sysctl -n hw.ncpu)
    bundle config --global jobs $((number_of_cores - 1))

    append_to_file "$HOME/.rvmrc" 'rvm_auto_reload_flag=2'
}

# Installs the essentials.
install_essentials() {
    create_directories

    set_osx_preferences

    install_homebrew

    fancy_echo 'Updating homebrew formulae...'
    brew update

    add_homebrew_tap 'gapple/services'      # Allows starting and stopping of services via homebrew
    add_homebrew_tap 'caskroom/cask'        # Allows installing apps via homebrew
    add_homebrew_tap 'caskroom/versions'    # Allows installing different versions of stuff via homebrew

    # Essentials
    install_or_upgrade_with_homebrew 'brew-cask'
    install_or_upgrade_with_homebrew 'git'
    install_or_upgrade_with_homebrew 'python'
    install_or_upgrade_with_homebrew 'tree'
    install_with_brew_cask 'alfred'
    install_with_brew_cask 'caffeine'
    install_with_brew_cask 'google-chrome'
    install_with_brew_cask 'brackets'
    install_with_brew_cask 'iterm2'
    install_with_brew_cask 'lastpass'
    install_with_brew_cask 'angry-ip-scanner'
    install_with_brew_cask 'transmit'
}

# Installs the extras.
install_extras() {
    # Development Stuff
    install_or_upgrade_with_homebrew 'qt'
    install_or_upgrade_with_homebrew 'heroku-toolbelt'
    install_or_upgrade_with_homebrew 'sqlite'
    install_or_upgrade_with_homebrew 'node'
    install_with_brew_cask 'caskroom/homebrew-versions/java6'
    install_with_brew_cask 'pycharm'
    install_with_brew_cask 'dash'
    install_with_brew_cask 'p4merge'
    install_with_brew_cask 'navicat-premium-essentials'
    install_with_brew_cask 'coderunner'

    #install_ruby

    #install_or_upgrade_with_homebrew 'postgresql'
    #brew services restart postgresql

    # Client Stuff
    install_with_brew_cask 'flux'
    install_with_brew_cask 'controlplane'
    install_with_brew_cask 'xquartz'
    install_with_brew_cask 'vlc'
    install_with_brew_cask 'bartender'
    install_with_brew_cask 'spideroak'
    install_with_brew_cask 'evernote'
    install_with_brew_cask 'dropzone'
    install_with_brew_cask 'parallels-desktop'

    fancy_echo 'No package exists for:'
    fancy_echo '   colorsnapper'
    fancy_echo '   popclip'
}

# Main
###################################################################################################

main() {
    extras="$1"

    check_operating_system

    # shellcheck disable=SC2154
    trap 'ret=$?; test $ret -ne 0 && printf "\nFailed!\n" >&2; exit $ret' EXIT
    set -e

    install_essentials

    if [ "$extras" == "true" ]; then
        fancy_echo 'Installing extras...'
        install_extras
    else
        fancy_echo 'Skipping extras...'
    fi

    fancy_echo 'Finished initialization!'
}

case $1 in
    -e | --extras )     shift
                        main "true"
                        exit
                        ;;
    -n | --noextras )   shift
                        main "false"
                        exit
                        ;;
    -h | --help )       usage
                        exit
                        ;;
    * )                 usage
                        exit 1
esac
